# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  dtc-crons
  
Globals:
  Function:
    Timeout: 3
  Api:
    # BinaryMediaTypes:
    #     - "*~1*"
    Cors:
      AllowMethods: "'GET,HEAD,OPTIONS,POST,PUT,DELETE'"
      AllowHeaders: "'Authorization, Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, X-Api-Key'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"

Parameters:
  ApiStageName:
    Type: String
    Default: stg
    AllowedValues: [prod, stg]

Conditions:
  CreateProdResources: !Equals [!Ref ApiStageName, prod]
  CreateDevResources: !Equals [!Ref ApiStageName, "stg"]

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:  
  # This is the Lambda function definition associated with the source code: sqs-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  UpdateInventoryScheduledEventLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs12.x
      Handler: src/handlers/scheduled-event-update-product-inventory.updateProductInventoryHandler
      Policies:
         # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: Inventory
        - DynamoDBCrudPolicy:
            TableName: Fulfillment_inventory
        - SSMParameterReadPolicy:
            ParameterName: lnj_group_token
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          NAV_PUBLIC_API_URL: !If [CreateProdResources, https://api.parkstreet.com, !If [CreateDevResources, https://stgapi.parkstreet.com, https://stgapi.parkstreet.com]]
      # This property associates this Lambda function with a scheduled CloudWatch Event. For all available properties, see
      # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
      # This example runs every hour.
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
      MemorySize: 128
      Timeout: 100
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  UpdateSalesOrderScheduledEventLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs12.x
      Handler: src/handlers/scheduled-event-update-sales-order.ThirdPartyUpdateSalesOrderHandler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Tables
        - DynamoDBCrudPolicy:
            TableName: Order
        - SESEmailTemplateCrudPolicy: {}
        - SESBulkTemplatedCrudPolicy:
            IdentityName: OrderMailTemplate
            IdentityName: parkstreet.com
        - SSMParameterReadPolicy:
            ParameterName: lnj_group_token
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          FE_DOMAIN_URL: !If [CreateProdResources, https://dtc.parkstreet.com, !If [CreateDevResources, https://stgdtc.parkstreet.com, https://stgdtc.parkstreet.com]]
          NAV_PUBLIC_API_URL: !If [CreateProdResources, https://api.parkstreet.com, !If [CreateDevResources, https://stgapi.parkstreet.com, https://stgapi.parkstreet.com]]
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
      MemorySize: 128
      Timeout: 100  
